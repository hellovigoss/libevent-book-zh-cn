include::license.txt[]

:language: C

= Libevent 参考手册：初步



== Libevent总揽



Libevent是一个编写高性能可移植非阻塞IO的类库。  它的
设计目的有：

可移植性::
    使用 Libevent 编写的程序应该能够
    在所有支持Libevent平台中工作。  即便没有很好的
    方式实现非阻塞IO，Libevent也依然支持运行
    ，你的程序依然可以在受限环境中顺利运行。

速度::
    Libevent尝试使用不同平台上最快的非阻塞IO
    实现，并且尽量少的
    增加间接开销。

可扩展性::
    Libevent的设计使得它可以处理
    成千上万的活动套接字。

便捷性::
    在可能的情况，使用Libevent来编写程序都会是稳定
    ，可移植的。


Libevent由以下组件组成：

evutil::
    不同系统网络实现的
    统一抽象层。

event和event_base::
    这是Libevent的核心。  它提供了一个API
    以适配各种特定平台，基于非阻塞IO的后端。
    它会告知你套接字何时读写就绪，
    基本的超时，以及系统信号量检测。

bufferevent::
    这些函数提供一个基于
    Libevent的event-based核心的便捷调用封装。  可以允许你的应用访问
    读写缓冲，而不是在
    套接字就绪的时候再通知，这样你就可以在IO实际
    发生时操作。

    bufferevent接口也有几个不同的后端，所以
    it can take advantage of systems that provide faster ways to do
    nonblocking IO, such as the Windows IOCP API.

evbuffer::
    This module implements the buffers underlying bufferevents,
    and provides functions for efficient and/or convenient access.

evhttp::
    A simple HTTP client/server implementation.

evdns::
    A simple DNS client/server implementation.

evrpc::
    A simple RPC implementation.



The Libraries
~~~~~~~~~~~~~

When Libevent is built, by default it installs the following
libraries:

libevent_core::
    All core event and buffer functionality.  这
    library contains all the event_base, evbuffer, bufferevent,
    and utility functions.

libevent_extra::
    This library defines protocol-specific functionality that
    you may or may not want for your application, including HTTP, DNS,
    and RPC.

libevent::
    This library exists for historical reasons; it contains the
    contents of both libevent_core and libevent_extra.  You shouldn't
    use it; it may go away in a future version of Libevent.

The following libraries are installed only on some platforms:

libevent_pthreads::
    This library adds threading and locking implementations based on
    the pthreads portable threading library.  It is separated from
    libevent_core so that you don't need to link against pthreads
    to use Libevent unless you are _actually_ using Libevent in a
    multithreaded way.

libevent_openssl::
    This library provides support for encrypted communications using
    bufferevents and the OpenSSL library.  It is separated from
    libevent_core so that you don't need to link against OpenSSL
    to use Libevent unless you are _actually_ using encrypted
    connections.

The Headers
~~~~~~~~~~~

All current public Libevent headers are installed under the 'event2'
directory.  Headers fall into three broad classes:

API headers::
    An API header is one that defines current public interfaces to
    Libevent.  These headers have no special suffix.

Compatibility headers::
    A compatibility header includes definitions for deprecated
    functions.  You shouldn't include it unless you're porting a
    program from an older version of Libevent.

Structure headers::
    These headers define structures with relatively volatile layouts.
    Some of these are exposed in case you need fast access to
    structure component; some are exposed for historical reasons.
    Relying on any of the structures in headers directly can break
    your program's binary compatibility with other versions of
    Libevent, sometimes in hard-to-debug ways.  These headers have the
    suffix "_struct.h"

(There are also older versions of the Libevent headers without the
'event2' directory.  See "If you have to work with an old version of
Libevent" below.)

If you have to work with an old version of Libevent
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Libevent 2.0 has revised its APIs to be generally more rational and
less error-prone.  If it's possible, you should write new programs to
use the Libevent 2.0 APIs.  But sometimes you might need to work with
the older APIs, either to update an existing application, or to
support an environment where for some reason you can't install
Libevent 2.0 or later.

Older versions of Libevent had fewer headers, and did not install them
under "event2":

[options="header",width="80%",cols="30%,70%"]
|======================================================================
| OLD HEADER... | ...REPLACED BY CURRENT HEADERS
| event.h    | event2/event*.h, event2/buffer*.h event2/bufferevent*.h
event2/tag*.h
| evdns.h    | event2/dns*.h
| evhttp.h   | event2/http*.h
| evrpc.h    | event2/rpc*.h
| evutil.h   | event2/util*.h
|======================================================================

In Libevent 2.0 and later, the old headers still exist as wrappers for
the new headers.

Some other notes on working with older versions:

- Before 1.4, there was only one library, "libevent", that contained
  the functionality currently split into libevent_core and
  libevent_extra.
- Before 2.0, there was no support for locking; Libevent could be
  thread-safe, but only if you made sure to never use the same
  structure from two threads at the same time.

Individual sections below will discuss the obsolete APIs that you
might encounter for specific areas of the codebase.

Notes on version status
^^^^^^^^^^^^^^^^^^^^^^^

Versions of Libevent before 1.4.7 or so should be considered totally
obsolete.  Versions of Libevent before 1.3e or so should be considered
hopelessly bug-ridden.

(Also, please don't send the Libevent maintainers any new features for
1.4.x or earlier---it's supposed to stay as a stable release.  And
if you encounter a bug in 1.3x or earlier, please make sure that it
still exists in the latest stable version before you report it:
subsequent releases have happened for a reason.)
